# -*- coding: utf-8 -*-
"""Multi-Object Detection and Recognition using YOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TAxezLNZPr8KaS5Ht-6msBjydCZi2yKT
"""

!pip install opencv-python
!pip install numpy
!pip install matplotlib

# Clone Darknet repository
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet

!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile

!make

!wget https://raw.githubusercontent.com/AlexeyAB/darknet/master/cfg/yolov3.cfg -O yolov3.cfg

!wget https://raw.githubusercontent.com/AlexeyAB/darknet/master/data/coco.names -O coco.names

!wget https://pjreddie.com/media/files/yolov3.weights

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load YOLO
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getLayerNames()
output_layers = net.getUnconnectedOutLayers()  # Get unconnected output layer indices

# Convert output_layers tuple to a list of layer names
output_layer_names = [layer_names[i - 1] for i in output_layers]

# Load image
img = cv2.imread("/content/Imagecv.jpeg")
img = cv2.resize(img, None, fx=0.4, fy=0.4)
height, width, channels = img.shape

# Detecting objects
blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)
outs = net.forward(output_layer_names)  # Use output_layer_names instead of output_layers

# Showing information on the screen
class_ids = []
confidences = []
boxes = []
for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > 0.5:
            # Object detected
            center_x = int(detection[0] * width)
            center_y = int(detection[1] * height)
            w = int(detection[2] * width)
            h = int(detection[3] * height)

            # Rectangle coordinates
            x = int(center_x - w / 2)
            y = int(center_y - h / 2)

            boxes.append([x, y, w, h])
            confidences.append(float(confidence))
            class_ids.append(class_id)

indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

font = cv2.FONT_HERSHEY_PLAIN
for i in range(len(boxes)):
    if i in indexes:
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        color = (255, 0, 0)
        cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
        cv2.putText(img, label, (x, y + 30), font, 3, color, 3)

# Show the image
cv2_imshow(img)
cv2.waitKey(0)  # This can remain as it is
cv2.destroyAllWindows()  # This can remain as it is